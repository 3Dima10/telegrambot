import tocen
import logging

from aiogram import Dispatcher, Bot, executor, types
from aiogram.types.message import ContentType

logging.basicConfig(level=logging.INFO)
bot = Bot(token=tocen.tok_test)
dp = Dispatcher(bot)
PRICES = types.LabeledPrice(label="–ü–æ–∂–µ—Ä—Ç–≤–∞ —Ö—Ä–∞–º—É", amount=10 * 100)  # –∫–æ–ø–µ–π–∫–∏ (–≥—Ä–Ω)

#start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    sto = open('C:\\Users\\FUJITSU\\Pictures\\–∞–Ω–∏–º–µ\\nnn\\–Ω–æ–≤—ã–π —Ö—Ä–∞–º\\—Ñ–æ—Ç–æ.png', 'rb')  # –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
    await bot.send_photo(message.chat.id, sto)
    clav = types.ReplyKeyboardMarkup(resize_keyboard=True)
    tp1 = types.KeyboardButton("–ü–æ–º–æ–ª–∏—Ü–∞üôè")
    tp2 = types.KeyboardButton("–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –±–æ–≥–∏–Ω–µ üí∏")
    clav.add(tp1, tp2)
    await bot.send_message(message.chat.id,
                           "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ø—Ä–∏—Ö–æ–∂–∞–Ω–∏–Ω,\n –Ø - <b>—Ö—Ä–∞–º –ø—Ä–∏—Å–≤—è—Ç–æ–π –í–∏–∫—Ç–æ—Ä–∏–π</b>, –±–æ—Ç —Ö—Ä–∞–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–ª—É–∂–∏—Ç—å –Ω–∞—à–µ–π –±–æ–≥–∏–Ω–∏ –í–∏–∫—Ç–æ—Ä–∏–π .",
                           parse_mode='html', reply_markup=clav)


@dp.message_handler(content_types=['text'])
async def lop(message):
    cop_1 = open('C:\\Users\\FUJITSU\\Pictures\\–∞–Ω–∏–º–µ\\nnn\\–Ω–æ–≤—ã–π —Ö—Ä–∞–º\\–∏–∫–æ–Ω–∞1.png', 'rb')  # –§–æ—Ç–æ –∏–∫–æ–Ω—ã ‚Ññ1
    cop_2 = open('C:\\Users\\FUJITSU\\Pictures\\–∞–Ω–∏–º–µ\\nnn\\–Ω–æ–≤—ã–π —Ö—Ä–∞–º\\–∏–∫–æ–Ω–∞2.png', 'rb')  # –§–æ—Ç–æ –∏–∫–æ–Ω—ã ‚Ññ2
    cop_3 = open('C:\\Users\\FUJITSU\\Pictures\\–∞–Ω–∏–º–µ\\nnn\\–Ω–æ–≤—ã–π —Ö—Ä–∞–º\\stickes.webp', 'rb')  # –°—Ç–∏–∫–µ—Ä –ø–æ–∂–µ—Ä—Ç–≤—É–≤–∞–Ω–∏–µ
    if message.chat.type == 'private':
        if message.text == '–ü–æ–º–æ–ª–∏—Ü–∞üôè':
            kls = types.InlineKeyboardMarkup(row_width=1)  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–æ–º–µ—Ä –¥–≤–∞

            await bot.send_photo(message.chat.id, cop_1)  # –ò–∫–æ–Ω—ã –¥–ª—è –º–æ–ª–∏—Ç–≤—ã
            await bot.send_photo(message.chat.id, cop_2)  # –≤—Ç–æ—Ä–∞—è –∏–∫–æ–Ω–∞ –¥–ª—è –º–æ–ª–∏—Ç–≤—ã

            itm = types.InlineKeyboardButton("–û—Ç–ø—É—Å—Ç–∏—Ç—å –≥—Ä–µ—Ö ", callback_data='good')  # –ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–æ–º–µ—Ä –¥–≤–∞

            kls.add(itm)  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–æ–º–µ—Ä –¥–≤–∞
            await bot.send_message(message.chat.id, str("–¶–∞—Ä–∏—Ü–∞ –º–æ—è –ü—Ä–µ–±–ª–∞–≥–∞—è, –ù–∞–¥–µ–∂–¥–∞ –º–æ—è, –ë–æ–≥–æ—Ä–æ–¥–∏—Ü–∞,\n"
                                                        "–ü—Ä–∏—é—Ç —Å–∏—Ä–æ—Ç –∏ —Å—Ç—Ä–∞–Ω–Ω–∏–∫–æ–≤ –ó–∞—â–∏—Ç–Ω–∏—Ü–∞, —Å–∫–æ—Ä–±—è—â–∏—Ö –†–∞–¥–æ—Å—Ç—å,\n"
                                                        "–û–±–∏–∂–µ–Ω–Ω—ã—Ö –ü–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å–Ω–∏—Ü–∞!\n"
                                                        "–í–∏–¥–∏—à—å –º–æ—é –±–µ–¥—É, –≤–∏–¥–∏—à—å –º–æ—é —Å–∫–æ—Ä–±—å;\n"
                                                        "–ü–æ–º–æ–≥–∏ –º–Ω–µ, –∫–∞–∫ –Ω–µ–º–æ—â–Ω–æ–º—É, –Ω–∞–ø—Ä–∞–≤—å –º–µ–Ω—è, –∫–∞–∫ —Å—Ç—Ä–∞–Ω–Ω–∏–∫–∞.\n"
                                                        "–û–±–∏–¥—É –º–æ—é –∑–Ω–∞–µ—à—å: —Ä–∞–∑—Ä–µ—à–∏ –µ–µ –ø–æ –°–≤–æ–µ–π –≤–æ–ª–µ."),
                                   reply_markup=kls)  # –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–∞–ª–∏—Ü–∞ –ú–æ–ª–∏—Ç–≤–∞
        elif message.text == '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –±–æ–≥–∏–Ω–µ üí∏':  # –ü–æ–∂–µ—Ä—Ç–≤—É–≤–∞–Ω–∏–µ
            await bot.send_sticker(message.chat.id, cop_3)  # –°—Ç–∏–∫–µ—Ä –ø–æ–∂–µ—Ä—Ç–≤
            # –û–ø–ª–∞—Ç–∞
            await bot.send_invoice(message.chat.id,
                                   title="–ü–æ–∂–µ—Ä—Ç–≤–∞",
                                   description="–ü–æ–∂–µ—Ä—Ç–≤—É–π –±–æ–≥–∏–Ω–∏ üôè\n"
                                               "–ò –æ–Ω–∞ —Å–ø—É—Å—Ç–∏—Ç –Ω–∞ —Ç–µ–±—è —É–¥–∞—á—Éüòá\n"
                                               "–ò –æ—Ç–ø—É—Å—Ç–∏—Ç —Å—Ä–∞–∑—É –≤—Å–µ –≥—Ä–µ—Ö–∏üòá",
                                   provider_token=tocen.tok_col,  # –¢–æ–∫–µ–Ω –∫–æ—à–µ–ª—å–∫–∞
                                   currency='UAH',
                                   photo_url="file:///C:/Users/FUJITSU/Pictures/%D0%B0%D0%BD%D0%B8%D0%BC%D0%B5/nnn/%D0%B8%D0%BA%D0%BE%D0%BD%D0%B01.png",
                                   photo_size=416,
                                   photo_width=416,
                                   photo_height=216,
                                   is_flexible=False,
                                   prices=[PRICES],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload")


# –ú–æ–ª–∏—Ç–≤–∞
@dp.callback_query_handler(lambda query: True)
async def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                await bot.send_message(call.message.chat.id, '–ì—Ä–µ—Ö –æ—Ç–ø—É—â–µ–Ω')  # –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —Ç–µ–∫—Å—Ç
                await bot.edit_message_text(chat_id=call.message.chat.id,
                                            message_id=call.message.message_id,
                                            text="–ú–æ–ª–∏—Ç–≤–∞ –æ–∫–æ–Ω—á–µ–Ω–∞",
                                            reply_markup=None)  # –∑–∞–º–µ–Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                await bot.answer_callback_query(callback_query_id=call.id,
                                                show_alert=False,
                                                text="–ì—Ä–µ—Ö –æ—Ç–ø—É—â–µ–Ω !!!!")  # –û–ø–æ–≤–∏—â–µ–Ω–∏–µ


    except Exception as e:
        print(repr(e))


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
